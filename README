Breakdown - an ultra-light Markdown(-inspired) implementation

---

Breakdown implements a small subset of the Markdown language. See
http://daringfireball.net/projects/markdown/ for more info on that. But 
breakdown also differs from the standard Markdown.

The idea behind Breakdown is to support only a very limited set of the entire
Markdown language, to allow very basic users to use it. So no HTML tags and
only one notation style for each supported style.

Breakdown (currently) (only) supports:
 # heading
 ## heading
 * bullet
 --- (horizontal line)
 ... *italic* ...
 ... **bold** ...
 and automatic paragraph detection.

Some other markups are possible:

[link]
[link|label]
[image:image-link]
[image:image-link|alternate text]
http://link
[style:class-name|text]

The goal is to provide completely identical implementations in both Javascript
and server-side languages. This allows the use of Javascript in the browser,
offering the user a real-time rendering of his/her work. On the server the
same work can also be converted to the identical HTML representation and be
sent to the browser as such.

# Javascript

For now I've also copied the interface of Showdown, the Javascript
implementation of Markdown. See http://attacklab.net/showdown/ for more info.

Usage:
	var input = "Breakdown *rocks* too";
	var html  = new Breakdown.converter().makeHtml(input);
	alert(html); // Breakdown <em>rocks</em> too

Online example: http://christophevg.github.com/breakdown

# PHP

The current implementation is an almost literal translation of the Javascript
code. It deserves a PHP-ization, but for now it works ;-)

Usage:
  $input     = "Breakdown *rocks* too";
  $converter = Breakdown::getConverter();
	$html      = $converter->makeHtml($input);
	echo $html; // Breakdown <em>rocks</em> too

# Testing

The t/ directory contains some scripts that test all implementations using the
same input and expected results data. This allows for some level of regression
testing.

Usage:
	$ cd t
	$ ./runAllTests.sh 
	Testing all-in-one from Javascript
	OK
	Testing all-in-one from PHP
	OK

You need a copy of the Rhino Javascript engine (see
http://www.mozilla.org/rhino/download.html). The runAllTest.sh script by
default tries to find it in its own directory. To supply the location of your
Rhino installation - and more specifically that of js.jar - pass it using the
RHINO environment variable. The same goes for the Java and PHP CLI executable.

  $ cd t
	$ RHINO=/my/install/of/js.jar PHP=/my/install/of/php ./runAllTests.sh
	Testing all-in-one from Javascript
	OK
	Testing all-in-one from PHP
	OK
